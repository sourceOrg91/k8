apiVersion: batch/v1
kind: Job
metadata:
  name: fiber-application-{{ .Release.Name }}
spec:
  parallelism: 1 # Set the value to greater than 1 to start standby JobManagers
  template:
    metadata:
      labels:
        app: fiber
        component: application
    spec:
      restartPolicy: OnFailure
      containers:
        - name: fiber-application
          image: {{ .Values.fiber.image }}
          imagePullPolicy: {{ .Values.fiber.imagePullPolicy }}
          env:
            - name: ENABLE_BUILT_IN_PLUGINS
              value: {{ .Values.fiber.applicationArg.enableFsPlugin }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          args: ["standalone-job", "--host", "$(POD_IP)", "--jobName=Fiber-NRT-{{ .Release.Name }}", "--jobBehaviourType={{ .Values.fiber.applicationArg.jobBehaviourType }}",
                 "--jobType={{ .Values.fiber.applicationArg.jobType }}", "--multipartEnabled={{ .Values.fiber.applicationArg.multipartEnabled }}", "--runner=FlinkRunner",
                 "--kafkaSecurityProtocol={{ .Values.fiber.applicationArg.kafkaSecurityProtocol }}","--objectPath=fiber/%s/data/", "--secretKey={{ .Values.fiber.fileDetails.fileSecretKey }}",
                 "--bucket={{ .Values.fiber.fileDetails.fileBucket }}", "--fileRegion={{ .Values.fiber.fileDetails.fileRegion }}", "--fileFormat={{ .Values.fiber.applicationArg.fileFormat }}",
                 "--accessKey={{ .Values.fiber.fileDetails.fileAccessKey }}", "--daysAgo={{ .Values.fiber.applicationArg.daysAgo }}", "--kafkaServers={{ .Values.fiber.applicationArg.kafkaServers }}",
                 "--localFilePath={{ .Values.fiber.applicationArg.localFilePath }}","--kafkaTopic={{ .Values.fiber.applicationArg.kafkaTopic }}", "--kafkaGroupId=fiber-nrt-{{ .Release.Name }}",
                 "--metastoreURL={{ .Values.fiber.applicationArg.metastoreURL }}", "--mergeDistribution={{ .Values.fiber.applicationArg.mergeDistribution }}","--fixedWindowSize={{ .Values.fiber.applicationArg.fixedWindowSize }}",
                 "--streaming=true", "--schemaVertical=ALL", "--tenantId=1", "--cookie={{ .Values.fiber.applicationArg.cookie }}","--metastoreMasterKey={{ .Values.fiber.applicationArg.metastoreMasterKey }}",
                 "--schemaType=ENTITY", "--checkpointingMode=EXACTLY_ONCE", "--stateBackend=filesystem", "--stateBackendStoragePath={{ .Values.fiber.applicationArg.stateBackendStoragePath }}",
                 "--savepointPath={{ .Values.fiber.applicationArg.savepointPath }}","--externalizedCheckpointsEnabled={{ .Values.fiber.applicationArg.externalizedCheckpointsEnabled }}", "--retainExternalizedCheckpointsOnCancellation={{ .Values.fiber.applicationArg.retainExternalizedCheckpointsOnCancellation }}",
                 "--checkpointingInterval=300000", "--checkpointTimeoutMillis=3600000", "--failOnCheckpointingErrors=false", "--partitionLevel={{ .Values.fiber.applicationArg.partitionLevel }}",
                 "--cloudProvider={{ .Values.fiber.applicationArg.cloudProvider }}", "--tempFileProvider={{ .Values.fiber.applicationArg.intermediateFileProvider }}", "--projectId={{ .Values.fiber.applicationArg.projectId }}",
                 "--alertEnabled={{ .Values.fiber.applicationArg.alertEnabled }}", "--slackWebhookUrl={{ .Values.fiber.applicationArg.slackWebhookUrl }}"]
          ports:
            - containerPort: 6123
              name: rpc
            - containerPort: 6124
              name: blob-server
            - containerPort: 8081
              name: webui
          livenessProbe:
            tcpSocket:
              port: 6123
            initialDelaySeconds: 30
            periodSeconds: 60
          volumeMounts:
          {{- if .Values.fiber.pvc.enableEFS }}
          - name: efs
            mountPath: /var
          {{- end }}
          - name: fiber-config-volume
            mountPath: /opt/flink/conf
          securityContext:
            runAsUser: 9999 # refers to user _flink_ from official flink image, change if necessary
          resources:
            {{- toYaml .Values.fiber.resources | nindent 12 }}
      {{- with .Values.fiber.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.fiber.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.fiber.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: fiber-service-account-{{ .Release.Name }} # Service account which has the permissions to create, edit, delete ConfigMaps
      volumes:
      {{- if .Values.fiber.pvc.enableEFS }}
      - name: efs
        persistentVolumeClaim:
          claimName: {{ .Values.fiber.pvc.name }}
      {{- end }}
      - name: fiber-config-volume
        configMap:
          name: fiber-config-{{ .Release.Name }}
          items:
            - key: flink-conf.yaml
              path: flink-conf.yaml
            - key: log4j-console.properties
              path: log4j-console.properties